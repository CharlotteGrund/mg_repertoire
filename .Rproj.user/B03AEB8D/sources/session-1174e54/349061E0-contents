sd(cat1.data_m$IGR_vid)
mean(cat1.data_m$IRS_1)
range(cat1.data_m$IRS_1)
sd(cat1.data_m$IRS_1)
mean(cat1.data_m$IRS_3)
range(cat1.data_m$IRS_3)
sd(cat1.data_m$IRS_3)
signallers.cat1_m <- unique(cat1.data_m$Signaller.matcat)
tokens.cat1_m <- sum(cat1.data_m$n_tokens)
df <- irs_igr_sgn.matcat
# Calculate statistics
df_irs1 <- df %>%
group_by(Mat_cat, Signaller.matcat) %>%
summarise(Repertoire = sum(IRS_1),
Tokens = sum(n_tokens))
df_irs3 <- df %>%
group_by(Mat_cat, Signaller.matcat) %>%
summarise(Repertoire = sum(IRS_3),
Tokens = sum(n_tokens))
# IRS_1
table_irs1 <- df_irs1 %>%
group_by(Mat_cat) %>%
summarise(
Mean_Repertoire = mean(Repertoire),
SD_Repertoire = sd(Repertoire),
Min_Repertoire = min(Repertoire),
Max_Repertoire = max(Repertoire),
Mean_Tokens = mean(Tokens),
SD_Tokens = sd(Tokens),
Min_Tokens = min(Tokens),
Max_Tokens = max(Tokens),
Count_Signaller.matcat = n_distinct(Signaller.matcat)
)
# 3 tokens per record
table_irs3 <- df_irs3 %>%
group_by(Mat_cat) %>%
summarise(
Mean_Repertoire = mean(Repertoire),
SD_Repertoire = sd(Repertoire),
Min_Repertoire = min(Repertoire),
Max_Repertoire = max(Repertoire),
Mean_Tokens = mean(Tokens),
SD_Tokens = sd(Tokens),
Min_Tokens = min(Tokens),
Max_Tokens = max(Tokens),
Count_Signaller.matcat = n_distinct(Signaller.matcat)
)
# View the new dataframe
table_irs1
table_irs3
#
# cat1 <- data %>% filter(Mat_cat == "cat-1")
# length(unique(cat1$Gesture_record))
# length(unique(cat1$Signaller))
#
# cat2 <- data %>% filter(Mat_cat == "cat-2")
# length(unique(cat2$Gesture_record))
# length(unique(cat2$Signaller))
#
# cat3 <- data %>% filter(Mat_cat == "cat-3")
# length(unique(cat3$Gesture_record))
# length(unique(cat3$Signaller))
#
# cat4 <- data %>% filter(Mat_cat == "cat-4")
# length(unique(cat4$Gesture_record))
# length(unique(cat4$Signaller))
#
# unique(data$Signaller)
# length(unique(data$Gesture_record))
#
# female <- data %>% filter(Sgn_sex == "female")
# length(unique(female$Signaller))
# mean(female$Sgn_age)
# sd(female$Sgn_age)
# range(female$Sgn_age)
#
# male <- data %>% filter(Sgn_sex == "male")
# length(unique(male$Signaller))
# mean(male$Sgn_age)
# sd(male$Sgn_age)
# range(male$Sgn_age)
#
# mean(data$Sgn_age)
# sd(data$Sgn_age)
# range(data$Sgn_age)
library(ggplot2)
library(dplyr)
library(hrbrthemes)  # for theme_ipsum()
# Reverse factor levels so infants appear at the top
data_combined <- data_combined %>%
mutate(Mat_cat = factor(Mat_cat, levels = rev(c("cat-1", "cat-2", "cat-3", "cat-4"))))
# figure 4 post-feedback
# # Load necessary libraries
library(tidyverse)
library(ggplot2)
library(ggtext)  # For markdown formatting in axis labels
library(gridExtra)  # For arranging multiple plots
library(hrbrthemes)  # For theme_ipsum()
data <- read_csv('02_data_clean/irs_igr_data_btmk.csv')
# Combine both datasets into one (with an additional column indicating the source)
data_combined <- bind_rows(
data %>% mutate(Source = "Mat_cat"),
data %>% mutate(Source = "Sgn_sex")  # Using 'data_adjust' for the second plot
)
sgn_sex_plot <- data_combined %>%
filter(Source == "Sgn_sex") %>%
ggplot(aes(x = Mat_cat, y = IRS_1)) +
# Boxplot: Fill based on Sgn_sex
geom_boxplot(aes(fill = Sgn_sex), position = position_dodge(width = 0.8), alpha = 0.8) +
# Jitter points: Centered more around the middle (without adding fill/legend for jitter)
geom_jitter(aes(color = Sgn_sex), size = 2, alpha = 0.7,
position = position_jitterdodge(dodge.width = 0.8, jitter.width = 0.2),
show.legend = FALSE) +  # No legend for jitter
# Dashed vertical lines separating categories
geom_vline(xintercept = c(1.5, 2.5, 3.5), linetype = "dashed",
color = "grey50", size = 0.5) +  # No ymin/ymax needed
scale_color_manual(values = c("black", "black")) +  # Custom colors for Sgn_sex (not affecting jitter)
scale_fill_manual(values = c("#528B8B", "#EEE0E5")) +   # Matching fill colors for the boxplot
theme_ipsum() +
theme(
legend.position = c(0.9, 0.9),  # Position inside the graph (customized coordinates)
legend.title = element_blank(),  # Remove the legend title
legend.text = element_text(size = 20),   # Increase legend label size
legend.box.background = element_rect(color = "black", size = 0.5),  # Thinner border for the legend box
plot.title = element_text(size = 12),
axis.title.x = element_text(size = 24, margin = margin(t = 15)),
axis.title.y = element_text(size = 22, margin = margin(r = 15), hjust = 0.5),
axis.text.x = element_markdown(size = 24, angle = 45, hjust = 1),
axis.text.y = element_text(size = 24),
axis.ticks.x = element_line(size = 0.5, color = "grey80"),
axis.ticks.length = unit(0.8, "cm")
) +
scale_x_discrete(labels = c(
"cat-1" = "<b></b><br><i>infants</i>",
"cat-2" = "<b></b><br><i>juveniles</i>",
"cat-3" = "<b></b><br><i>saf & nf + </i><br><i> sam & bb</i>",
"cat-4" = "<b></b><br><i>af + am</i>"
)) +
scale_y_continuous(limits = c(0, 60), expand = expansion(mult = c(0, 0.1))) +
labs(fill = "Sgn_sex") +  # Add label for the fill legend
ggtitle("") +
xlab("") +
ylab("IRS 1")
# Print the updated plot
sgn_sex_plot
library(ggplot2)
library(dplyr)
library(hrbrthemes)  # for theme_ipsum()
# Reverse factor levels so infants appear at the top
data_combined <- data_combined %>%
mutate(Mat_cat = factor(Mat_cat, levels = rev(c("cat-1", "cat-2", "cat-3", "cat-4"))))
data_combined <- data_combined %>%
mutate(
Sgn_sex = factor(Sgn_sex, levels = c("male", "female")),             # For plotting (female on top)
Sgn_sex_legend = factor(Sgn_sex, levels = c("female", "male"))       # For legend (female listed first)
)
# Create the plot
sgn_sex_plot <- data_combined %>%
filter(Source == "Sgn_sex") %>%
ggplot(aes(x = Mat_cat, y = IRS_1)) +
# Boxplot and jitter
geom_boxplot(aes(fill = Sgn_sex), position = position_dodge(width = 0.8), alpha = 0.8) +
geom_jitter(aes(color = Sgn_sex), size = 2, alpha = 0.7,
position = position_jitterdodge(dodge.width = 0.8, jitter.width = 0.2),
show.legend = FALSE) +
# Full-width separating lines (using segments) â€” unchanged
# geom_segment(aes(x = 0.5, xend = 0.5, y = 0, yend = 55), color = "grey20", linetype = "solid") +
# geom_segment(aes(x = 1.5, xend = 1.5, y = 0, yend = 55), color = "grey20", linetype = "solid") +
# geom_segment(aes(x = 2.5, xend = 2.5, y = 0, yend = 55), color = "grey20", linetype = "solid") +
# geom_segment(aes(x = 3.5, xend = 3.5, y = 0, yend = 55), color = "grey20", linetype = "solid") +
# geom_segment(aes(x = 4.5, xend = 4.5, y = 0, yend = 55), color = "grey20", linetype = "solid") +
# Color scales
scale_color_manual(values = c("black", "black")) +
scale_fill_manual(values = c("#EEE0E5", "#528B8B")) +
# Flip coordinates
coord_flip() +
# Theme adjustments (ticks longer, axis texts moved further away)
theme_ipsum() +
theme(
legend.position = c(0.9, 0.86),
legend.title = element_blank(),
legend.text = element_text(size = 20),
legend.box.background = element_rect(color = "black", size = 0.5),
axis.title.x = element_text(size = 20, margin = margin(t = 25, l = 30), vjust = 1),  # More margin above x-axis title
axis.title.y = element_text(size = 22, margin = margin(r = 15), hjust = 0.5), # More margin right of y-axis title
axis.text.x = element_text(size = 22, margin = margin(t = 15)),   # Push x-axis text further down
axis.text.y = element_text(size = 20, margin = margin(r = 15)),   # Push y-axis text further right
axis.ticks.length = unit(0.6, "cm"),    # Longer ticks for both axes
axis.ticks.y = element_line(size = 0.7, color = "white"),  # Ticks on category axis
axis.ticks.x = element_line(size = 0.7, color = "grey70"),
axis.line = element_line(color = "grey60", size = 0.8),  # Darker axis lines
panel.grid.major = element_line(color = "grey80", size = 0.5),
plot.clip = "off"  # Allow annotations outside plot area if needed
) +
# Category labels
scale_x_discrete(labels = c(
"cat-1" = "infants",
"cat-2" = "juveniles",
"cat-3" = "subadult & nulliparous females\n+                      \nsubadult males & blackbacks",
"cat-4" = "parous (adult) females\n+         \nadult males"
)) +
# IRS1 axis
scale_y_continuous(limits = c(0, 60), expand = expansion(mult = c(0, 0.05))) +
labs(fill = "Sgn_sex") +
ggtitle("") +
xlab("") +
ylab("Individual repertoire size (IRS_1)                                     ") +
guides(fill = guide_legend(reverse = TRUE))
# Load grid for drawing
library(grid)
# Draw the plot first
print(sgn_sex_plot)
# Define start and end y-positions in npc units
# y_start <- 0.18  # Approximate location of the x-axis (adjust as needed)
# y_end <- 0.90    # Upper margin
#
# # Calculate 5 equally spaced y-positions between start and end
# y_positions <- seq(y_start, y_end, length.out = 5)
y_positions <- c(0.195, 0.372, 0.55, 0.725, 0.902)
# Draw dashed lines across the full width at each y-position
for (y in y_positions) {
grid.lines(x = unit(c(0.07, 0.34), "npc"),
y = unit(c(y, y), "npc"),
gp = gpar(col = "grey50", alpha = 0.4, lty = "solid", lwd = 5))
}
y_positions <- c(0.195, 0.372, 0.55, 0.725, 0.902)
# Draw dashed lines across the full width at each y-position
for (y in y_positions) {
grid.lines(x = unit(c(0.37, 0.8), "npc"),
y = unit(c(y, y), "npc"),
gp = gpar(col = "grey50", alpha = 0.4, lty = "solid", lwd = 5))
}
library(ggplot2)
library(dplyr)
library(hrbrthemes)  # for theme_ipsum()
# Reverse factor levels so infants appear at the top
data_combined <- data_combined %>%
mutate(Mat_cat = factor(Mat_cat, levels = rev(c("cat-1", "cat-2", "cat-3", "cat-4"))))
data_combined <- data_combined %>%
mutate(
Sgn_sex = factor(Sgn_sex, levels = c("male", "female")),             # For plotting (female on top)
Sgn_sex_legend = factor(Sgn_sex, levels = c("female", "male"))       # For legend (female listed first)
)
# Create the plot
sgn_sex_plot <- data_combined %>%
filter(Source == "Sgn_sex") %>%
ggplot(aes(x = Mat_cat, y = IRS_1)) +
# Boxplot and jitter
geom_boxplot(aes(fill = Sgn_sex), position = position_dodge(width = 0.8), alpha = 0.8) +
geom_jitter(aes(color = Sgn_sex), size = 2, alpha = 0.7,
position = position_jitterdodge(dodge.width = 0.8, jitter.width = 0.2),
show.legend = FALSE) +
# Full-width separating lines (using segments) â€” unchanged
# geom_segment(aes(x = 0.5, xend = 0.5, y = 0, yend = 55), color = "grey20", linetype = "solid") +
# geom_segment(aes(x = 1.5, xend = 1.5, y = 0, yend = 55), color = "grey20", linetype = "solid") +
# geom_segment(aes(x = 2.5, xend = 2.5, y = 0, yend = 55), color = "grey20", linetype = "solid") +
# geom_segment(aes(x = 3.5, xend = 3.5, y = 0, yend = 55), color = "grey20", linetype = "solid") +
# geom_segment(aes(x = 4.5, xend = 4.5, y = 0, yend = 55), color = "grey20", linetype = "solid") +
# Color scales
scale_color_manual(values = c("black", "black")) +
scale_fill_manual(values = c("#EEE0E5", "#528B8B")) +
# Flip coordinates
coord_flip() +
# Theme adjustments (ticks longer, axis texts moved further away)
theme_ipsum() +
theme(
legend.position = c(0.9, 0.86),
legend.title = element_blank(),
legend.text = element_text(size = 20),
legend.box.background = element_rect(color = "black", size = 0.5),
axis.title.x = element_text(size = 20, margin = margin(t = 25, l = 30), vjust = 1),
axis.title.y = element_text(size = 22, margin = margin(r = 15), hjust = 0.5),
axis.text.x = element_text(size = 22, margin = margin(t = 15)),
axis.text.y = element_text(size = 20, margin = margin(r = 15)),
axis.ticks.length = unit(0.6, "cm"),
axis.ticks.y = element_line(size = 0.7, color = "white"),
axis.ticks.x = element_line(size = 0.7, color = "grey70"),
axis.line = element_line(color = "grey60", size = 0.8),
panel.grid.major = element_blank(),  # Turn off major grid lines
panel.grid.minor = element_blank(),  # Turn off minor grid lines
plot.clip = "off"
)+
# Category labels
scale_x_discrete(labels = c(
"cat-1" = "infants",
"cat-2" = "juveniles",
"cat-3" = "subadult & nulliparous females\n+                      \nsubadult males & blackbacks",
"cat-4" = "parous (adult) females\n+         \nadult males"
)) +
# IRS1 axis
scale_y_continuous(limits = c(0, 60), expand = expansion(mult = c(0, 0.05))) +
labs(fill = "Sgn_sex") +
ggtitle("") +
xlab("") +
ylab("Individual repertoire size (IRS_1)                                     ") +
guides(fill = guide_legend(reverse = TRUE))
# Load grid for drawing
library(grid)
# Draw the plot first
print(sgn_sex_plot)
# Define start and end y-positions in npc units
# y_start <- 0.18  # Approximate location of the x-axis (adjust as needed)
# y_end <- 0.90    # Upper margin
#
# # Calculate 5 equally spaced y-positions between start and end
# y_positions <- seq(y_start, y_end, length.out = 5)
y_positions <- c(0.195, 0.372, 0.55, 0.725, 0.902)
# Draw dashed lines across the full width at each y-position
for (y in y_positions) {
grid.lines(x = unit(c(0.07, 0.34), "npc"),
y = unit(c(y, y), "npc"),
gp = gpar(col = "grey50", alpha = 0.4, lty = "solid", lwd = 5))
}
y_positions <- c(0.195, 0.372, 0.55, 0.725, 0.902)
# Draw dashed lines across the full width at each y-position
for (y in y_positions) {
grid.lines(x = unit(c(0.37, 0.8), "npc"),
y = unit(c(y, y), "npc"),
gp = gpar(col = "grey50", alpha = 0.4, lty = "solid", lwd = 5))
}
library(tidyverse)
# data
xx <- read.csv('/Users/cvg1/RProjects/PhD/C0_Data/gesture.data.morphs2.csv')
# freq <- read.csv('/Users/cvg1/RProjects/PhD/C0_Data/table_gestureaction_frequency.csv')
xx <- xx %>% filter(Gesture_record != "Unclear")
xx <- xx %>% filter(Gesture_record != "PotentiallyNew")
xx1 <- xx %>% group_by(Gesture_record) %>% summarise (n = n()) %>% filter (n>=3)
ga.include <- xx1$Gesture_record
xx <- xx %>% filter(Gesture_record %in% ga.include)
data <- xx %>% select (Date, Signaller, Context_prior_signaller, Context_post_signaller, Communication_number)
unique(data$Context_post_signaller)
data <- data %>% mutate(
Context_post_signaller = case_when(
Context_post_signaller == "Unknown" ~ "Unknown",
Context_post_signaller == "TravelCarryMove" ~ "Carrying",
Context_post_signaller == "TravelCarry" ~ "Carrying",
Context_post_signaller == "RestUnknown" ~ "Resting",
Context_post_signaller == "Rest" ~ "Resting",
Context_post_signaller == "RestContact" ~ "Affiliating",
Context_post_signaller == "GroomSocial" ~ "Grooming",
Context_post_signaller == "GroomSolitary" ~ "Other",
Context_post_signaller == "PlaySocial" ~ "Playing",
Context_post_signaller == "PlaySolitary" ~ "Other",
Context_post_signaller == "SocioSex" ~ "Sexual interaction",
Context_post_signaller == "Solicitation" ~ "Sexual interaction",
Context_post_signaller == "Sex" ~ "Sexual interaction",
Context_post_signaller == "TravelMove" ~ "Traveling",
Context_post_signaller == "Travel" ~ "Traveling",
Context_post_signaller == "Unclear" ~ "Other",
Context_post_signaller == "Agonistic" ~ "Agonistic interaction",
Context_post_signaller == "FeedingMonopolizable" ~ "Feeding",
Context_post_signaller == "Display" ~ "Agonistic interaction",
TRUE ~ Context_post_signaller
)
)
str(data)
unique(data$Context_post_signaller)
library(dplyr)
library(stringr)
# Step 1: Filter rows
filtered_data <- data %>%
filter(
str_detect(Communication_number, "^\\d+$") |   # Only digits
str_detect(Communication_number, "^\\d+a$")     # Ends in 'a'
)
length(unique(filtered_data$Communication_number))
length(unique(filtered_data$Signaller))
unique(filtered_data$Signaller)
unique(filtered_data$Context_post_signaller)
# Step 2: Create frequency table
context_table <- filtered_data %>%
count(Communication_number, Context_post_signaller) %>%
tidyr::pivot_wider(
names_from = Context_post_signaller,
values_from = n,
values_fill = 0
)
# View the result
print(context_table)
sum(context_table$Carrying)
# Create summary: sum of each context across all communication numbers
context_summary <- colSums(context_table[ , -1])  # Exclude Communication_number column
# Convert to data frame for readability
summary_df <- as.data.frame(context_summary)
summary_df <- tibble::rownames_to_column(summary_df, var = "Context_post_signaller")
colnames(summary_df)[2] <- "Total"
# View summary
print(summary_df)
distinct_counts <- data %>%
group_by(Context_post_signaller) %>%
summarise(
unique_comms = n_distinct(Communication_number)
) %>%
arrange(desc(unique_comms))
library(dplyr)
library(ggplot2)
# Calculate percentages
distinct_counts <- distinct_counts %>%
mutate(percentage = unique_comms / sum(unique_comms) * 100)
ggplot(distinct_counts, aes(x = reorder(Context_post_signaller, -percentage), y = percentage)) +
geom_col(
aes(fill = ifelse(Context_post_signaller %in% c("Other", "Unknown"), "grey", "original")),
alpha = 0.7, color = "black", size = 0.5, width = 0.6
) +
geom_text(
aes(
label = sprintf("%.1f", percentage),
color = ifelse(Context_post_signaller %in% c("Other", "Unknown"), "grey50", "black")
),
vjust = -0.5,
size = 5,
fontface = "bold"
) +
scale_fill_manual(
values = c(
grey = "grey70",
original = "#8B8B00"
),
guide = FALSE
) +
scale_color_identity() +  # Use colors specified in aes() for text labels
labs(
title = "",
x = "",
y = "Gestural communications (%)"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 16, margin = margin(t = 10)),
axis.text.y = element_text(size = 18, margin = margin(r = 10)),
axis.title.y = element_text(size = 18, margin = margin(r = 20)),
plot.title = element_text(size = 18, face = "bold", margin = margin(b = 15)),
axis.ticks.length = unit(0.6, "cm"),
axis.ticks.y = element_line(size = 0.7, color = "grey70"),
axis.ticks.x = element_line(size = 0.7, color = "grey70"),
axis.line = element_line(color = "grey60", size = 0.8)
) +
scale_y_continuous(
limits = c(0, 20),
breaks = seq(0, 20, 5),
expand = expansion(mult = c(0, 0.05))
)
ggplot(distinct_counts, aes(x = reorder(Context_post_signaller, -percentage), y = percentage)) +
geom_col(
aes(fill = ifelse(Context_post_signaller %in% c("Other", "Unknown"), "grey", "original")),
alpha = 0.7, color = "black", size = 0.5, width = 0.6
) +
geom_text(
aes(
label = sprintf("%.1f", percentage),
color = ifelse(Context_post_signaller %in% c("Other", "Unknown"), "grey50", "black")
),
vjust = -0.5,
size = 5,
fontface = "bold"
) +
scale_fill_manual(
values = c(
grey = "grey70",
original = "#8B8B00"
),
guide = FALSE
) +
scale_color_identity() +  # Use colors specified in aes() for text labels
labs(
title = "",
x = "",
y = "Gestural communications (%)"
) +
theme_minimal() +
theme(
panel.grid = element_blank(),  # <- This removes all gridlines
axis.text.x = element_text(angle = 45, hjust = 1, size = 16, margin = margin(t = 10)),
axis.text.y = element_text(size = 18, margin = margin(r = 10)),
axis.title.y = element_text(size = 18, margin = margin(r = 20)),
plot.title = element_text(size = 18, face = "bold", margin = margin(b = 15)),
axis.ticks.length = unit(0.6, "cm"),
axis.ticks.y = element_line(size = 0.7, color = "grey70"),
axis.ticks.x = element_line(size = 0.7, color = "grey70"),
axis.line = element_line(color = "grey60", size = 0.8)
) +
scale_y_continuous(
limits = c(0, 20),
breaks = seq(0, 20, 5),
expand = expansion(mult = c(0, 0.05))
)
knitr::opts_chunk$set(echo = TRUE,
message=FALSE,
warning=FALSE)
options(digits=3)
## Load Packages
library(tidyverse)
library(kableExtra)
library(knitr)
library(ClusterR)
library(tibble)
library(ggplot2)
library(stringr)
library(tidyr)
library(dplyr)
library(tidymodels)
library(embed)
library(parallel)
library(doParallel)
library(purrr)
library(reshape2)
library(igraph)
library(Rfast)
library(pkgload)
library(broom)
library(BayesLCA)
devtools::load_all('~/RProjects/wildminds/R/')
